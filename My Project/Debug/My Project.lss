
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000df8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000df8  00000e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014a6  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a3  00000000  00000000  000024aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c28  00000000  00000000  00002d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a4  00000000  00000000  00003978  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006fe  00000000  00000000  00003c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fb9  00000000  00000000  0000431a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000052d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "main.h"



 int main(void)
 {
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	uint8_t local_u8FlagGetNum1=1;				// flag to know when to get the first number 
	fint64_t local_u8FinalResult=0;				// storage for the result of the calculator
	fint64_t local_u8FlagRationalNumber=0;				// storage for the result of Rational number that might happened cuz of the devision 
	fint64_t local_u8Temp=0;				// empty variable for the operation 

  	 KPD_voidInit();
  90:	0e 94 e7 02 	call	0x5ce	; 0x5ce <KPD_voidInit>
  	 LCD_INIT();
  94:	0e 94 ed 01 	call	0x3da	; 0x3da <LCD_INIT>
	   
     LCD_SetCursor(1,0);
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetCursor>
	 LCD_SEND_STRING(" CALLCULATOR");
  a0:	80 e7       	ldi	r24, 0x70	; 112
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SEND_STRING>
	uint8_t local_u8Num2=0;				// get the second number
	uint8_t local_u8Operation=0;				// get the operation that will happened 
	uint8_t local_u8FlagGetNum2=0;				// flag to know when to get the second number 
	uint8_t local_u8FlagGetNum1=1;				// flag to know when to get the first number 
	fint64_t local_u8FinalResult=0;				// storage for the result of the calculator
	fint64_t local_u8FlagRationalNumber=0;				// storage for the result of Rational number that might happened cuz of the devision 
  a8:	19 82       	std	Y+1, r1	; 0x01
  aa:	1a 82       	std	Y+2, r1	; 0x02
  ac:	1b 82       	std	Y+3, r1	; 0x03
  ae:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t local_u8Counter=1;			// position of the written number 
	uint8_t local_u8Num1=0;				// get the first number 
	uint8_t local_u8Num2=0;				// get the second number
	uint8_t local_u8Operation=0;				// get the operation that will happened 
	uint8_t local_u8FlagGetNum2=0;				// flag to know when to get the second number 
	uint8_t local_u8FlagGetNum1=1;				// flag to know when to get the first number 
  b0:	ee 24       	eor	r14, r14
  b2:	e3 94       	inc	r14
    uint8_t local_u8PressedKey = 0xff;	//Initialize the Pull up res in the MC for the keypad
	uint8_t local_u8Counter=1;			// position of the written number 
	uint8_t local_u8Num1=0;				// get the first number 
	uint8_t local_u8Num2=0;				// get the second number
	uint8_t local_u8Operation=0;				// get the operation that will happened 
	uint8_t local_u8FlagGetNum2=0;				// flag to know when to get the second number 
  b4:	1e 82       	std	Y+6, r1	; 0x06

    uint8_t local_u8PressedKey = 0xff;	//Initialize the Pull up res in the MC for the keypad
	uint8_t local_u8Counter=1;			// position of the written number 
	uint8_t local_u8Num1=0;				// get the first number 
	uint8_t local_u8Num2=0;				// get the second number
	uint8_t local_u8Operation=0;				// get the operation that will happened 
  b6:	00 e0       	ldi	r16, 0x00	; 0
 {

    uint8_t local_u8PressedKey = 0xff;	//Initialize the Pull up res in the MC for the keypad
	uint8_t local_u8Counter=1;			// position of the written number 
	uint8_t local_u8Num1=0;				// get the first number 
	uint8_t local_u8Num2=0;				// get the second number
  b8:	f1 2c       	mov	r15, r1
 int main(void)
 {

    uint8_t local_u8PressedKey = 0xff;	//Initialize the Pull up res in the MC for the keypad
	uint8_t local_u8Counter=1;			// position of the written number 
	uint8_t local_u8Num1=0;				// get the first number 
  ba:	d1 2c       	mov	r13, r1

 int main(void)
 {

    uint8_t local_u8PressedKey = 0xff;	//Initialize the Pull up res in the MC for the keypad
	uint8_t local_u8Counter=1;			// position of the written number 
  bc:	11 e0       	ldi	r17, 0x01	; 1

 
 while(1)
 {
	 
	 LCD_SetCursor(1,0);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetCursor>
	 LCD_SEND_STRING(" CALLCULATOR");
  c6:	80 e7       	ldi	r24, 0x70	; 112
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SEND_STRING>
	 
	do 
  	{
  	 local_u8PressedKey = KPD_u8GetPressedKey();   /* Get the pressed number*/
  ce:	0e 94 02 03 	call	0x604	; 0x604 <KPD_u8GetPressedKey>
  d2:	5c 01       	movw	r10, r24
  d4:	8d 83       	std	Y+5, r24	; 0x05
  	} while (local_u8PressedKey == 0xff);
  d6:	8f 3f       	cpi	r24, 0xFF	; 255
  d8:	d1 f3       	breq	.-12     	; 0xce <main+0x4c>
	  
	  
  /*  to print the number on the LCD*/
  if(local_u8PressedKey<10)
  da:	8a 30       	cpi	r24, 0x0A	; 10
  dc:	c8 f4       	brcc	.+50     	; 0x110 <main+0x8e>
  {
	  LCD_SetCursor(local_u8Counter,1);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	81 2f       	mov	r24, r17
  e2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetCursor>
	  LCD_SEND_NUMBER(local_u8PressedKey);
  e6:	ad 81       	ldd	r26, Y+5	; 0x05
  e8:	6a 2f       	mov	r22, r26
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 89 05 	call	0xb12	; 0xb12 <__floatunsisf>
  f4:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_SEND_NUMBER>
	  local_u8Counter++;
  f8:	1f 5f       	subi	r17, 0xFF	; 255
	  if(local_u8FlagGetNum1==1)
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	eb 12       	cpse	r14, r27
  fe:	16 c0       	rjmp	.+44     	; 0x12c <main+0xaa>
	  {
	  local_u8Num1=(local_u8Num1*10)+local_u8PressedKey;
 100:	dd 0c       	add	r13, r13
 102:	8d 2d       	mov	r24, r13
 104:	88 0f       	add	r24, r24
 106:	88 0f       	add	r24, r24
 108:	d8 0e       	add	r13, r24
 10a:	2d 81       	ldd	r18, Y+5	; 0x05
 10c:	d2 0e       	add	r13, r18
 10e:	0e c0       	rjmp	.+28     	; 0x12c <main+0xaa>
	  }
  }
	else if(local_u8PressedKey>9 && local_u8PressedKey!='c')	  /* show the figure on LCD */
 110:	8d 81       	ldd	r24, Y+5	; 0x05
 112:	8a 30       	cpi	r24, 0x0A	; 10
 114:	58 f0       	brcs	.+22     	; 0x12c <main+0xaa>
 116:	83 36       	cpi	r24, 0x63	; 99
 118:	49 f0       	breq	.+18     	; 0x12c <main+0xaa>
	  {  
		 LCD_SetCursor(local_u8Counter,1);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	81 2f       	mov	r24, r17
 11e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetCursor>
		 LCD_SEND_DATA(local_u8PressedKey);
 122:	8d 81       	ldd	r24, Y+5	; 0x05
 124:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_SEND_DATA>
		 
		 local_u8Counter++;
 128:	1f 5f       	subi	r17, 0xFF	; 255
		 local_u8FlagGetNum1=0;
 12a:	e1 2c       	mov	r14, r1
		
		 
	  }
 /* get the second number */
 if(local_u8FlagGetNum2==1&&local_u8PressedKey!='=')
 12c:	9e 81       	ldd	r25, Y+6	; 0x06
 12e:	91 30       	cpi	r25, 0x01	; 1
 130:	49 f4       	brne	.+18     	; 0x144 <main+0xc2>
 132:	ad 81       	ldd	r26, Y+5	; 0x05
 134:	ad 33       	cpi	r26, 0x3D	; 61
 136:	31 f0       	breq	.+12     	; 0x144 <main+0xc2>
 {
	 local_u8Num2=(local_u8Num2*10)+local_u8PressedKey;
 138:	ff 0c       	add	r15, r15
 13a:	8f 2d       	mov	r24, r15
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	f8 0e       	add	r15, r24
 142:	fa 0e       	add	r15, r26
 }
 
 /* get type of operation that will happen*/
 switch(local_u8PressedKey)
 144:	bb 24       	eor	r11, r11
 146:	bd e2       	ldi	r27, 0x2D	; 45
 148:	ab 16       	cp	r10, r27
 14a:	b1 04       	cpc	r11, r1
 14c:	79 f0       	breq	.+30     	; 0x16c <main+0xea>
 14e:	2c f4       	brge	.+10     	; 0x15a <main+0xd8>
 150:	8b e2       	ldi	r24, 0x2B	; 43
 152:	a8 16       	cp	r10, r24
 154:	b1 04       	cpc	r11, r1
 156:	b1 f0       	breq	.+44     	; 0x184 <main+0x102>
 158:	18 c0       	rjmp	.+48     	; 0x18a <main+0x108>
 15a:	9f e2       	ldi	r25, 0x2F	; 47
 15c:	a9 16       	cp	r10, r25
 15e:	b1 04       	cpc	r11, r1
 160:	69 f0       	breq	.+26     	; 0x17c <main+0xfa>
 162:	a8 e7       	ldi	r26, 0x78	; 120
 164:	aa 16       	cp	r10, r26
 166:	b1 04       	cpc	r11, r1
 168:	29 f0       	breq	.+10     	; 0x174 <main+0xf2>
 16a:	0f c0       	rjmp	.+30     	; 0x18a <main+0x108>
	 local_u8Operation='+';
	 local_u8FlagGetNum2=1;
	 break;
	 case '-':
	 local_u8Operation='-';
	  local_u8FlagGetNum2=1;
 16c:	b1 e0       	ldi	r27, 0x01	; 1
 16e:	be 83       	std	Y+6, r27	; 0x06
	 case '+':
	 local_u8Operation='+';
	 local_u8FlagGetNum2=1;
	 break;
	 case '-':
	 local_u8Operation='-';
 170:	0d e2       	ldi	r16, 0x2D	; 45
	  local_u8FlagGetNum2=1;
	 break;
 172:	0b c0       	rjmp	.+22     	; 0x18a <main+0x108>
	 case 'x':
	 local_u8Operation='x';
	  local_u8FlagGetNum2=1;
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	2e 83       	std	Y+6, r18	; 0x06
	 case '-':
	 local_u8Operation='-';
	  local_u8FlagGetNum2=1;
	 break;
	 case 'x':
	 local_u8Operation='x';
 178:	08 e7       	ldi	r16, 0x78	; 120
	  local_u8FlagGetNum2=1;
	 break;
 17a:	07 c0       	rjmp	.+14     	; 0x18a <main+0x108>
	 case '/':
	 local_u8Operation='/';
	  local_u8FlagGetNum2=1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	8e 83       	std	Y+6, r24	; 0x06
	 case 'x':
	 local_u8Operation='x';
	  local_u8FlagGetNum2=1;
	 break;
	 case '/':
	 local_u8Operation='/';
 180:	0f e2       	ldi	r16, 0x2F	; 47
	  local_u8FlagGetNum2=1;
	 break;
 182:	03 c0       	rjmp	.+6      	; 0x18a <main+0x108>
 /* get type of operation that will happen*/
 switch(local_u8PressedKey)
 {
	 case '+':
	 local_u8Operation='+';
	 local_u8FlagGetNum2=1;
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	9e 83       	std	Y+6, r25	; 0x06
 
 /* get type of operation that will happen*/
 switch(local_u8PressedKey)
 {
	 case '+':
	 local_u8Operation='+';
 188:	0b e2       	ldi	r16, 0x2B	; 43
	 break;
	 
 }
  
  /* make the operation and print it */
  if(local_u8PressedKey =='=')
 18a:	ad 81       	ldd	r26, Y+5	; 0x05
 18c:	ad 33       	cpi	r26, 0x3D	; 61
 18e:	09 f0       	breq	.+2      	; 0x192 <main+0x110>
 190:	97 c0       	rjmp	.+302    	; 0x2c0 <main+0x23e>
  {
	switch(local_u8Operation)
 192:	0d 32       	cpi	r16, 0x2D	; 45
 194:	21 f1       	breq	.+72     	; 0x1de <main+0x15c>
 196:	18 f4       	brcc	.+6      	; 0x19e <main+0x11c>
 198:	0b 32       	cpi	r16, 0x2B	; 43
 19a:	99 f0       	breq	.+38     	; 0x1c2 <main+0x140>
 19c:	91 c0       	rjmp	.+290    	; 0x2c0 <main+0x23e>
 19e:	0f 32       	cpi	r16, 0x2F	; 47
 1a0:	61 f1       	breq	.+88     	; 0x1fa <main+0x178>
 1a2:	08 37       	cpi	r16, 0x78	; 120
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <main+0x126>
 1a6:	8c c0       	rjmp	.+280    	; 0x2c0 <main+0x23e>
	{
		case 'x':
		local_u8FinalResult=local_u8Num1*local_u8Num2;
 1a8:	df 9c       	mul	r13, r15
 1aa:	b0 01       	movw	r22, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	07 2e       	mov	r0, r23
 1b0:	00 0c       	add	r0, r0
 1b2:	88 0b       	sbc	r24, r24
 1b4:	99 0b       	sbc	r25, r25
 1b6:	0e 94 8b 05 	call	0xb16	; 0xb16 <__floatsisf>
		local_u8Counter++;
 1ba:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_SEND_NUMBER(local_u8FinalResult);
 1bc:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_SEND_NUMBER>
		break;
 1c0:	7f c0       	rjmp	.+254    	; 0x2c0 <main+0x23e>
		case '+':
		local_u8FinalResult=local_u8Num1+local_u8Num2;
 1c2:	6f 2d       	mov	r22, r15
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	6d 0d       	add	r22, r13
 1c8:	71 1d       	adc	r23, r1
 1ca:	07 2e       	mov	r0, r23
 1cc:	00 0c       	add	r0, r0
 1ce:	88 0b       	sbc	r24, r24
 1d0:	99 0b       	sbc	r25, r25
 1d2:	0e 94 8b 05 	call	0xb16	; 0xb16 <__floatsisf>
		local_u8Counter++;
 1d6:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_SEND_NUMBER(local_u8FinalResult);
 1d8:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_SEND_NUMBER>
		break;
 1dc:	71 c0       	rjmp	.+226    	; 0x2c0 <main+0x23e>
		case '-':
		local_u8FinalResult=local_u8Num1-local_u8Num2;
 1de:	6d 2d       	mov	r22, r13
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	6f 19       	sub	r22, r15
 1e4:	71 09       	sbc	r23, r1
 1e6:	07 2e       	mov	r0, r23
 1e8:	00 0c       	add	r0, r0
 1ea:	88 0b       	sbc	r24, r24
 1ec:	99 0b       	sbc	r25, r25
 1ee:	0e 94 8b 05 	call	0xb16	; 0xb16 <__floatsisf>
		local_u8Counter++;
 1f2:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_SEND_NUMBER(local_u8FinalResult);
 1f4:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_SEND_NUMBER>
		break;
 1f8:	63 c0       	rjmp	.+198    	; 0x2c0 <main+0x23e>
		case '/':
		local_u8Temp=local_u8Num1/local_u8Num2;
 1fa:	8d 2d       	mov	r24, r13
 1fc:	6f 2d       	mov	r22, r15
 1fe:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__udivmodqi4>
 202:	68 2f       	mov	r22, r24
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 8b 05 	call	0xb16	; 0xb16 <__floatsisf>
 20e:	c6 2e       	mov	r12, r22
 210:	b7 2e       	mov	r11, r23
 212:	a8 2e       	mov	r10, r24
 214:	99 2e       	mov	r9, r25
		local_u8FinalResult=local_u8Num1/local_u8Num2;
		
		if((local_u8Temp-local_u8FinalResult)>0)
 216:	26 2f       	mov	r18, r22
 218:	37 2f       	mov	r19, r23
 21a:	48 2f       	mov	r20, r24
 21c:	59 2f       	mov	r21, r25
 21e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__subsf3>
 222:	86 2e       	mov	r8, r22
 224:	77 2e       	mov	r7, r23
 226:	68 2e       	mov	r6, r24
 228:	59 2e       	mov	r5, r25
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	a9 01       	movw	r20, r18
 230:	0e 94 3b 06 	call	0xc76	; 0xc76 <__gesf2>
 234:	18 16       	cp	r1, r24
 236:	2c f0       	brlt	.+10     	; 0x242 <main+0x1c0>
		local_u8FinalResult=local_u8Num1-local_u8Num2;
		local_u8Counter++;
		LCD_SEND_NUMBER(local_u8FinalResult);
		break;
		case '/':
		local_u8Temp=local_u8Num1/local_u8Num2;
 238:	8c 2c       	mov	r8, r12
 23a:	7b 2c       	mov	r7, r11
 23c:	6a 2c       	mov	r6, r10
 23e:	59 2c       	mov	r5, r9
 240:	08 c0       	rjmp	.+16     	; 0x252 <main+0x1d0>
		local_u8FinalResult=local_u8Num1/local_u8Num2;
		
		if((local_u8Temp-local_u8FinalResult)>0)
		{
		local_u8FlagRationalNumber=1;	
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	a0 e8       	ldi	r26, 0x80	; 128
 248:	bf e3       	ldi	r27, 0x3F	; 63
 24a:	89 83       	std	Y+1, r24	; 0x01
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	ab 83       	std	Y+3, r26	; 0x03
 250:	bc 83       	std	Y+4, r27	; 0x04
		local_u8Temp-=local_u8FinalResult;
		}
		if(local_u8Num2!=0)
 252:	ff 20       	and	r15, r15
 254:	19 f1       	breq	.+70     	; 0x29c <main+0x21a>
		{
			local_u8Counter++;
 256:	1f 5f       	subi	r17, 0xFF	; 255
			LCD_SEND_NUMBER(local_u8FinalResult);
 258:	6c 2d       	mov	r22, r12
 25a:	7b 2d       	mov	r23, r11
 25c:	8a 2d       	mov	r24, r10
 25e:	99 2d       	mov	r25, r9
 260:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_SEND_NUMBER>
			if(local_u8FlagRationalNumber==1)   //print the rational number 
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e8       	ldi	r20, 0x80	; 128
 26a:	5f e3       	ldi	r21, 0x3F	; 63
 26c:	69 81       	ldd	r22, Y+1	; 0x01
 26e:	7a 81       	ldd	r23, Y+2	; 0x02
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	9c 81       	ldd	r25, Y+4	; 0x04
 274:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__cmpsf2>
 278:	81 11       	cpse	r24, r1
 27a:	22 c0       	rjmp	.+68     	; 0x2c0 <main+0x23e>
			{
				LCD_SEND_DATA('.');
 27c:	8e e2       	ldi	r24, 0x2E	; 46
 27e:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_SEND_DATA>
				local_u8Temp*=100;
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	48 ec       	ldi	r20, 0xC8	; 200
 288:	52 e4       	ldi	r21, 0x42	; 66
 28a:	68 2d       	mov	r22, r8
 28c:	77 2d       	mov	r23, r7
 28e:	86 2d       	mov	r24, r6
 290:	95 2d       	mov	r25, r5
 292:	0e 94 40 06 	call	0xc80	; 0xc80 <__mulsf3>
				LCD_SEND_NUMBER(local_u8Temp);
 296:	0e 94 86 02 	call	0x50c	; 0x50c <LCD_SEND_NUMBER>
 29a:	12 c0       	rjmp	.+36     	; 0x2c0 <main+0x23e>
			}
			
		}
		else {
		LCD_CLear();
 29c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_CLear>
	    LCD_SetCursor(1,0);
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetCursor>
		LCD_SEND_STRING(" CALLCULATOR");
 2a8:	80 e7       	ldi	r24, 0x70	; 112
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SEND_STRING>
		LCD_SetCursor(1,1);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetCursor>
		LCD_SEND_STRING("Error");
 2b8:	8d e7       	ldi	r24, 0x7D	; 125
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SEND_STRING>
  
  
 
  
  /*  to clear the numbers on the LCD and initialize the calculator again */
  if(local_u8PressedKey=='c')
 2c0:	9d 81       	ldd	r25, Y+5	; 0x05
 2c2:	93 36       	cpi	r25, 0x63	; 99
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <main+0x246>
 2c6:	fb ce       	rjmp	.-522    	; 0xbe <main+0x3c>
  {
	LCD_CLear();
 2c8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_CLear>
    LCD_SetCursor(1,0);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_SetCursor>
 LCD_SEND_STRING(" CALLCULATOR");
 2d4:	80 e7       	ldi	r24, 0x70	; 112
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_SEND_STRING>
 local_u8Num1=0;
 local_u8Num2=0;
 local_u8Operation=0;
 local_u8FlagGetNum2=0;
 local_u8FinalResult=0;
 local_u8FlagGetNum1=1;				
 2dc:	ee 24       	eor	r14, r14
 2de:	e3 94       	inc	r14
 LCD_SEND_STRING(" CALLCULATOR");
 local_u8Counter = 1;
 local_u8Num1=0;
 local_u8Num2=0;
 local_u8Operation=0;
 local_u8FlagGetNum2=0;
 2e0:	1e 82       	std	Y+6, r1	; 0x06
    LCD_SetCursor(1,0);
 LCD_SEND_STRING(" CALLCULATOR");
 local_u8Counter = 1;
 local_u8Num1=0;
 local_u8Num2=0;
 local_u8Operation=0;
 2e2:	00 e0       	ldi	r16, 0x00	; 0
	LCD_CLear();
    LCD_SetCursor(1,0);
 LCD_SEND_STRING(" CALLCULATOR");
 local_u8Counter = 1;
 local_u8Num1=0;
 local_u8Num2=0;
 2e4:	f1 2c       	mov	r15, r1
  {
	LCD_CLear();
    LCD_SetCursor(1,0);
 LCD_SEND_STRING(" CALLCULATOR");
 local_u8Counter = 1;
 local_u8Num1=0;
 2e6:	d1 2c       	mov	r13, r1
  if(local_u8PressedKey=='c')
  {
	LCD_CLear();
    LCD_SetCursor(1,0);
 LCD_SEND_STRING(" CALLCULATOR");
 local_u8Counter = 1;
 2e8:	11 e0       	ldi	r17, 0x01	; 1
 2ea:	e9 ce       	rjmp	.-558    	; 0xbe <main+0x3c>

000002ec <Send_Hlfe_DataPort>:
	
	LCD_SEND_COMMAND(0x1c);
} 
void LCD_ScrollLeft(void){
	
	LCD_SEND_COMMAND(0x18);
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <Send_Hlfe_DataPort+0xa>
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <Send_Hlfe_DataPort+0xc>
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	08 2f       	mov	r16, r24
 2fe:	84 e0       	ldi	r24, 0x04	; 4
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	85 e0       	ldi	r24, 0x05	; 5
 304:	8a 83       	std	Y+2, r24	; 0x02
 306:	86 e0       	ldi	r24, 0x06	; 6
 308:	8b 83       	std	Y+3, r24	; 0x03
 30a:	87 e0       	ldi	r24, 0x07	; 7
 30c:	8c 83       	std	Y+4, r24	; 0x04
 30e:	10 e0       	ldi	r17, 0x00	; 0
 310:	14 c0       	rjmp	.+40     	; 0x33a <Send_Hlfe_DataPort+0x4e>
 312:	40 2f       	mov	r20, r16
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	01 2e       	mov	r0, r17
 318:	02 c0       	rjmp	.+4      	; 0x31e <Send_Hlfe_DataPort+0x32>
 31a:	55 95       	asr	r21
 31c:	47 95       	ror	r20
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <Send_Hlfe_DataPort+0x2e>
 322:	41 70       	andi	r20, 0x01	; 1
 324:	e1 e0       	ldi	r30, 0x01	; 1
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	ec 0f       	add	r30, r28
 32a:	fd 1f       	adc	r31, r29
 32c:	e1 0f       	add	r30, r17
 32e:	f1 1d       	adc	r31, r1
 330:	60 81       	ld	r22, Z
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_u8SetPinValue>
 338:	1f 5f       	subi	r17, 0xFF	; 255
 33a:	14 30       	cpi	r17, 0x04	; 4
 33c:	50 f3       	brcs	.-44     	; 0x312 <Send_Hlfe_DataPort+0x26>
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	08 95       	ret

00000350 <SendEnablePulse>:
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	63 e0       	ldi	r22, 0x03	; 3
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_u8SetPinValue>
 35a:	83 ef       	ldi	r24, 0xF3	; 243
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <SendEnablePulse+0xe>
 362:	00 c0       	rjmp	.+0      	; 0x364 <SendEnablePulse+0x14>
 364:	00 00       	nop
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_u8SetPinValue>
 370:	08 95       	ret

00000372 <LCD_SEND_DATA>:
 372:	cf 93       	push	r28
 374:	c8 2f       	mov	r28, r24
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_u8SetPinValue>
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_u8SetPinValue>
 38a:	8c 2f       	mov	r24, r28
 38c:	82 95       	swap	r24
 38e:	8f 70       	andi	r24, 0x0F	; 15
 390:	0e 94 76 01 	call	0x2ec	; 0x2ec <Send_Hlfe_DataPort>
 394:	0e 94 a8 01 	call	0x350	; 0x350 <SendEnablePulse>
 398:	8c 2f       	mov	r24, r28
 39a:	0e 94 76 01 	call	0x2ec	; 0x2ec <Send_Hlfe_DataPort>
 39e:	0e 94 a8 01 	call	0x350	; 0x350 <SendEnablePulse>
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <LCD_SEND_COMMAND>:
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_u8SetPinValue>
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_u8SetPinValue>
 3be:	8c 2f       	mov	r24, r28
 3c0:	82 95       	swap	r24
 3c2:	8f 70       	andi	r24, 0x0F	; 15
 3c4:	0e 94 76 01 	call	0x2ec	; 0x2ec <Send_Hlfe_DataPort>
 3c8:	0e 94 a8 01 	call	0x350	; 0x350 <SendEnablePulse>
 3cc:	8c 2f       	mov	r24, r28
 3ce:	0e 94 76 01 	call	0x2ec	; 0x2ec <Send_Hlfe_DataPort>
 3d2:	0e 94 a8 01 	call	0x350	; 0x350 <SendEnablePulse>
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <LCD_INIT>:
 3da:	cf 93       	push	r28
 3dc:	c4 e0       	ldi	r28, 0x04	; 4
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <LCD_INIT+0x12>
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	6c 2f       	mov	r22, r28
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_u8SetPinDirection>
 3ea:	cf 5f       	subi	r28, 0xFF	; 255
 3ec:	c8 30       	cpi	r28, 0x08	; 8
 3ee:	c0 f3       	brcs	.-16     	; 0x3e0 <LCD_INIT+0x6>
 3f0:	c1 e0       	ldi	r28, 0x01	; 1
 3f2:	06 c0       	rjmp	.+12     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	6c 2f       	mov	r22, r28
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_u8SetPinDirection>
 3fe:	cf 5f       	subi	r28, 0xFF	; 255
 400:	c4 30       	cpi	r28, 0x04	; 4
 402:	c0 f3       	brcs	.-16     	; 0x3f4 <LCD_INIT+0x1a>
 404:	8f e0       	ldi	r24, 0x0F	; 15
 406:	97 e2       	ldi	r25, 0x27	; 39
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	0e 94 76 01 	call	0x2ec	; 0x2ec <Send_Hlfe_DataPort>
 416:	0e 94 a8 01 	call	0x350	; 0x350 <SendEnablePulse>
 41a:	82 e0       	ldi	r24, 0x02	; 2
 41c:	0e 94 76 01 	call	0x2ec	; 0x2ec <Send_Hlfe_DataPort>
 420:	0e 94 a8 01 	call	0x350	; 0x350 <SendEnablePulse>
 424:	88 e0       	ldi	r24, 0x08	; 8
 426:	0e 94 76 01 	call	0x2ec	; 0x2ec <Send_Hlfe_DataPort>
 42a:	0e 94 a8 01 	call	0x350	; 0x350 <SendEnablePulse>
 42e:	8c e0       	ldi	r24, 0x0C	; 12
 430:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_SEND_COMMAND>
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_SEND_COMMAND>
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <LCD_SEND_STRING>:
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	ec 01       	movw	r28, r24
 444:	03 c0       	rjmp	.+6      	; 0x44c <LCD_SEND_STRING+0xe>
 446:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_SEND_DATA>
 44a:	21 96       	adiw	r28, 0x01	; 1
 44c:	88 81       	ld	r24, Y
 44e:	81 11       	cpse	r24, r1
 450:	fa cf       	rjmp	.-12     	; 0x446 <LCD_SEND_STRING+0x8>
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <LCD_SEND_DICNUMBER>:
 458:	cf 92       	push	r12
 45a:	df 92       	push	r13
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	2a 97       	sbiw	r28, 0x0a	; 10
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	6b 01       	movw	r12, r22
 478:	7c 01       	movw	r14, r24
 47a:	fe 01       	movw	r30, r28
 47c:	31 96       	adiw	r30, 0x01	; 1
 47e:	8a e0       	ldi	r24, 0x0A	; 10
 480:	df 01       	movw	r26, r30
 482:	1d 92       	st	X+, r1
 484:	8a 95       	dec	r24
 486:	e9 f7       	brne	.-6      	; 0x482 <LCD_SEND_DICNUMBER+0x2a>
 488:	c1 14       	cp	r12, r1
 48a:	d1 04       	cpc	r13, r1
 48c:	e1 04       	cpc	r14, r1
 48e:	f1 04       	cpc	r15, r1
 490:	19 f4       	brne	.+6      	; 0x498 <LCD_SEND_DICNUMBER+0x40>
 492:	80 e3       	ldi	r24, 0x30	; 48
 494:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_SEND_DATA>
 498:	10 e0       	ldi	r17, 0x00	; 0
 49a:	15 c0       	rjmp	.+42     	; 0x4c6 <LCD_SEND_DICNUMBER+0x6e>
 49c:	c7 01       	movw	r24, r14
 49e:	b6 01       	movw	r22, r12
 4a0:	2a e0       	ldi	r18, 0x0A	; 10
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	0e 94 b9 06 	call	0xd72	; 0xd72 <__divmodsi4>
 4ac:	e1 e0       	ldi	r30, 0x01	; 1
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	ec 0f       	add	r30, r28
 4b2:	fd 1f       	adc	r31, r29
 4b4:	e1 0f       	add	r30, r17
 4b6:	f1 1d       	adc	r31, r1
 4b8:	60 5d       	subi	r22, 0xD0	; 208
 4ba:	60 83       	st	Z, r22
 4bc:	c2 2e       	mov	r12, r18
 4be:	d3 2e       	mov	r13, r19
 4c0:	e4 2e       	mov	r14, r20
 4c2:	f5 2e       	mov	r15, r21
 4c4:	1f 5f       	subi	r17, 0xFF	; 255
 4c6:	c1 14       	cp	r12, r1
 4c8:	d1 04       	cpc	r13, r1
 4ca:	e1 04       	cpc	r14, r1
 4cc:	f1 04       	cpc	r15, r1
 4ce:	31 f7       	brne	.-52     	; 0x49c <LCD_SEND_DICNUMBER+0x44>
 4d0:	0d c0       	rjmp	.+26     	; 0x4ec <LCD_SEND_DICNUMBER+0x94>
 4d2:	e1 2f       	mov	r30, r17
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	31 97       	sbiw	r30, 0x01	; 1
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	8c 0f       	add	r24, r28
 4de:	9d 1f       	adc	r25, r29
 4e0:	e8 0f       	add	r30, r24
 4e2:	f9 1f       	adc	r31, r25
 4e4:	80 81       	ld	r24, Z
 4e6:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_SEND_DATA>
 4ea:	11 50       	subi	r17, 0x01	; 1
 4ec:	11 11       	cpse	r17, r1
 4ee:	f1 cf       	rjmp	.-30     	; 0x4d2 <LCD_SEND_DICNUMBER+0x7a>
 4f0:	2a 96       	adiw	r28, 0x0a	; 10
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	08 95       	ret

0000050c <LCD_SEND_NUMBER>:
 50c:	8f 92       	push	r8
 50e:	9f 92       	push	r9
 510:	af 92       	push	r10
 512:	bf 92       	push	r11
 514:	cf 92       	push	r12
 516:	df 92       	push	r13
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	6b 01       	movw	r12, r22
 51e:	7c 01       	movw	r14, r24
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	a9 01       	movw	r20, r18
 526:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__cmpsf2>
 52a:	88 23       	and	r24, r24
 52c:	3c f4       	brge	.+14     	; 0x53c <LCD_SEND_NUMBER+0x30>
 52e:	8d e2       	ldi	r24, 0x2D	; 45
 530:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_SEND_DATA>
 534:	f7 fa       	bst	r15, 7
 536:	f0 94       	com	r15
 538:	f7 f8       	bld	r15, 7
 53a:	f0 94       	com	r15
 53c:	c7 01       	movw	r24, r14
 53e:	b6 01       	movw	r22, r12
 540:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fixsfsi>
 544:	4b 01       	movw	r8, r22
 546:	5c 01       	movw	r10, r24
 548:	0e 94 8b 05 	call	0xb16	; 0xb16 <__floatsisf>
 54c:	9b 01       	movw	r18, r22
 54e:	ac 01       	movw	r20, r24
 550:	c7 01       	movw	r24, r14
 552:	b6 01       	movw	r22, r12
 554:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__subsf3>
 558:	6b 01       	movw	r12, r22
 55a:	7c 01       	movw	r14, r24
 55c:	20 e0       	ldi	r18, 0x00	; 0
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	a9 01       	movw	r20, r18
 562:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__cmpsf2>
 566:	88 23       	and	r24, r24
 568:	a1 f0       	breq	.+40     	; 0x592 <LCD_SEND_NUMBER+0x86>
 56a:	c5 01       	movw	r24, r10
 56c:	b4 01       	movw	r22, r8
 56e:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_SEND_DICNUMBER>
 572:	8e e2       	ldi	r24, 0x2E	; 46
 574:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_SEND_DATA>
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	40 e2       	ldi	r20, 0x20	; 32
 57e:	51 e4       	ldi	r21, 0x41	; 65
 580:	c7 01       	movw	r24, r14
 582:	b6 01       	movw	r22, r12
 584:	0e 94 40 06 	call	0xc80	; 0xc80 <__mulsf3>
 588:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fixsfsi>
 58c:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_SEND_DICNUMBER>
 590:	04 c0       	rjmp	.+8      	; 0x59a <LCD_SEND_NUMBER+0x8e>
 592:	c5 01       	movw	r24, r10
 594:	b4 01       	movw	r22, r8
 596:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_SEND_DICNUMBER>
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	df 90       	pop	r13
 5a0:	cf 90       	pop	r12
 5a2:	bf 90       	pop	r11
 5a4:	af 90       	pop	r10
 5a6:	9f 90       	pop	r9
 5a8:	8f 90       	pop	r8
 5aa:	08 95       	ret

000005ac <LCD_SetCursor>:
 5ac:	66 23       	and	r22, r22
 5ae:	29 f0       	breq	.+10     	; 0x5ba <LCD_SetCursor+0xe>
 5b0:	61 30       	cpi	r22, 0x01	; 1
 5b2:	21 f4       	brne	.+8      	; 0x5bc <LCD_SetCursor+0x10>
 5b4:	90 e4       	ldi	r25, 0x40	; 64
 5b6:	98 0f       	add	r25, r24
 5b8:	01 c0       	rjmp	.+2      	; 0x5bc <LCD_SetCursor+0x10>
 5ba:	98 2f       	mov	r25, r24
 5bc:	89 2f       	mov	r24, r25
 5be:	80 68       	ori	r24, 0x80	; 128
 5c0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_SEND_COMMAND>
 5c4:	08 95       	ret

000005c6 <LCD_CLear>:

}
void LCD_CLear(void){
	LCD_SEND_COMMAND(0x01);
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_SEND_COMMAND>
 5cc:	08 95       	ret

000005ce <KPD_voidInit>:
#include "KEYPAD_config.h"
#include "KEYPAD_interface.h"
#include "KEYPAD_privet.h"

void KPD_voidInit(void)
{
 5ce:	cf 93       	push	r28
	uint8_t Local_u8Counter;
	for(Local_u8Counter = KPD_u8_R0_PIN ; Local_u8Counter <= KPD_u8_R3_PIN ; Local_u8Counter++)
 5d0:	c0 e0       	ldi	r28, 0x00	; 0
 5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <KPD_voidInit+0x12>
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_INPUT);
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	6c 2f       	mov	r22, r28
 5d8:	82 e0       	ldi	r24, 0x02	; 2
 5da:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_u8SetPinDirection>
#include "KEYPAD_privet.h"

void KPD_voidInit(void)
{
	uint8_t Local_u8Counter;
	for(Local_u8Counter = KPD_u8_R0_PIN ; Local_u8Counter <= KPD_u8_R3_PIN ; Local_u8Counter++)
 5de:	cf 5f       	subi	r28, 0xFF	; 255
 5e0:	c4 30       	cpi	r28, 0x04	; 4
 5e2:	c0 f3       	brcs	.-16     	; 0x5d4 <KPD_voidInit+0x6>
 5e4:	c4 e0       	ldi	r28, 0x04	; 4
 5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <KPD_voidInit+0x26>
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_INPUT);
	
	for(Local_u8Counter = KPD_u8_C0_PIN ; Local_u8Counter <= KPD_u8_C3_PIN ; Local_u8Counter++)
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_OUTPUT);
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	6c 2f       	mov	r22, r28
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_u8SetPinDirection>
{
	uint8_t Local_u8Counter;
	for(Local_u8Counter = KPD_u8_R0_PIN ; Local_u8Counter <= KPD_u8_R3_PIN ; Local_u8Counter++)
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_INPUT);
	
	for(Local_u8Counter = KPD_u8_C0_PIN ; Local_u8Counter <= KPD_u8_C3_PIN ; Local_u8Counter++)
 5f2:	cf 5f       	subi	r28, 0xFF	; 255
 5f4:	c8 30       	cpi	r28, 0x08	; 8
 5f6:	c0 f3       	brcs	.-16     	; 0x5e8 <KPD_voidInit+0x1a>
	DIO_u8SetPinDirection(KPD_U8_PORT,Local_u8Counter,DIO_u8_PIN_OUTPUT);
	
	DIO_u8SetPortValue(KPD_U8_PORT,0xff);
 5f8:	6f ef       	ldi	r22, 0xFF	; 255
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	0e 94 8d 04 	call	0x91a	; 0x91a <DIO_u8SetPortValue>
}
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <KPD_u8GetPressedKey>:

uint8_t KPD_u8GetPressedKey(void)
{
 604:	af 92       	push	r10
 606:	bf 92       	push	r11
 608:	cf 92       	push	r12
 60a:	df 92       	push	r13
 60c:	ef 92       	push	r14
 60e:	ff 92       	push	r15
 610:	0f 93       	push	r16
 612:	1f 93       	push	r17
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	69 97       	sbiw	r28, 0x19	; 25
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	de bf       	out	0x3e, r29	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	cd bf       	out	0x3d, r28	; 61
	uint8_t Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState,Local_u8PressedKey=KPD_u8_NO_PRESSED_KEY_VAL;
	
	uint8_t Local_u8ColArr[KPD_u8_COL_NUM]={KPD_u8_C0_PIN,KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN};
 628:	84 e0       	ldi	r24, 0x04	; 4
 62a:	8a 83       	std	Y+2, r24	; 0x02
 62c:	85 e0       	ldi	r24, 0x05	; 5
 62e:	8b 83       	std	Y+3, r24	; 0x03
 630:	86 e0       	ldi	r24, 0x06	; 6
 632:	8c 83       	std	Y+4, r24	; 0x04
 634:	87 e0       	ldi	r24, 0x07	; 7
 636:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t Local_u8RowArr[KPD_u8_ROW_NUM]={KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};
 638:	1e 82       	std	Y+6, r1	; 0x06
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	8f 83       	std	Y+7, r24	; 0x07
 63e:	82 e0       	ldi	r24, 0x02	; 2
 640:	88 87       	std	Y+8, r24	; 0x08
 642:	83 e0       	ldi	r24, 0x03	; 3
 644:	89 87       	std	Y+9, r24	; 0x09
		
	uint8_t Local_KpdArr[KPD_u8_ROW_NUM][KPD_u8_COL_NUM] = KPD_u8_BUTTON_VAL;
 646:	80 e1       	ldi	r24, 0x10	; 16
 648:	e0 e6       	ldi	r30, 0x60	; 96
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	de 01       	movw	r26, r28
 64e:	1a 96       	adiw	r26, 0x0a	; 10
 650:	01 90       	ld	r0, Z+
 652:	0d 92       	st	X+, r0
 654:	8a 95       	dec	r24
 656:	e1 f7       	brne	.-8      	; 0x650 <KPD_u8GetPressedKey+0x4c>

	for(Local_u8ColumnIdx = 0 ; Local_u8ColumnIdx < KPD_u8_COL_NUM ; Local_u8ColumnIdx++)
 658:	b1 2c       	mov	r11, r1
 65a:	47 c0       	rjmp	.+142    	; 0x6ea <KPD_u8GetPressedKey+0xe6>
	{
		/* Activate the current column */
		DIO_u8SetPinValue(KPD_U8_PORT,Local_u8ColArr[Local_u8ColumnIdx],DIO_u8_PIN_LOW);
 65c:	cb 2c       	mov	r12, r11
 65e:	d1 2c       	mov	r13, r1
 660:	e2 e0       	ldi	r30, 0x02	; 2
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	ec 0f       	add	r30, r28
 666:	fd 1f       	adc	r31, r29
 668:	ec 0d       	add	r30, r12
 66a:	fd 1d       	adc	r31, r13
 66c:	a0 80       	ld	r10, Z
 66e:	40 e0       	ldi	r20, 0x00	; 0
 670:	6a 2d       	mov	r22, r10
 672:	82 e0       	ldi	r24, 0x02	; 2
 674:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_u8SetPinValue>
		for(Local_u8RowIdx = 0 ; Local_u8RowIdx < KPD_u8_ROW_NUM; Local_u8RowIdx++)
 678:	10 e0       	ldi	r17, 0x00	; 0
 67a:	2f c0       	rjmp	.+94     	; 0x6da <KPD_u8GetPressedKey+0xd6>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_U8_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
 67c:	e1 2e       	mov	r14, r17
 67e:	f1 2c       	mov	r15, r1
 680:	e6 e0       	ldi	r30, 0x06	; 6
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	ec 0f       	add	r30, r28
 686:	fd 1f       	adc	r31, r29
 688:	ee 0d       	add	r30, r14
 68a:	ff 1d       	adc	r31, r15
 68c:	00 81       	ld	r16, Z
 68e:	ae 01       	movw	r20, r28
 690:	4f 5f       	subi	r20, 0xFF	; 255
 692:	5f 4f       	sbci	r21, 0xFF	; 255
 694:	60 2f       	mov	r22, r16
 696:	82 e0       	ldi	r24, 0x02	; 2
 698:	0e 94 a3 04 	call	0x946	; 0x946 <DIO_u8GetPinValue>
			
			/*check if a button is pressed*/
			
			if(Local_u8PinState == DIO_u8_PIN_LOW)
 69c:	89 81       	ldd	r24, Y+1	; 0x01
 69e:	81 11       	cpse	r24, r1
 6a0:	1b c0       	rjmp	.+54     	; 0x6d8 <KPD_u8GetPressedKey+0xd4>
			{
				Local_u8PressedKey = Local_KpdArr[Local_u8RowIdx][Local_u8ColumnIdx];
 6a2:	ee 0c       	add	r14, r14
 6a4:	ff 1c       	adc	r15, r15
 6a6:	ee 0c       	add	r14, r14
 6a8:	ff 1c       	adc	r15, r15
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	8c 0f       	add	r24, r28
 6b0:	9d 1f       	adc	r25, r29
 6b2:	e8 0e       	add	r14, r24
 6b4:	f9 1e       	adc	r15, r25
 6b6:	f7 01       	movw	r30, r14
 6b8:	ec 0d       	add	r30, r12
 6ba:	fd 1d       	adc	r31, r13
 6bc:	11 85       	ldd	r17, Z+9	; 0x09
				
				/*wait until the key is released(polling or busy waiting)*/
				while(Local_u8PinState == DIO_u8_PIN_LOW)
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <KPD_u8GetPressedKey+0xca>
				{
					DIO_u8GetPinValue(KPD_U8_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
 6c0:	ae 01       	movw	r20, r28
 6c2:	4f 5f       	subi	r20, 0xFF	; 255
 6c4:	5f 4f       	sbci	r21, 0xFF	; 255
 6c6:	60 2f       	mov	r22, r16
 6c8:	82 e0       	ldi	r24, 0x02	; 2
 6ca:	0e 94 a3 04 	call	0x946	; 0x946 <DIO_u8GetPinValue>
			if(Local_u8PinState == DIO_u8_PIN_LOW)
			{
				Local_u8PressedKey = Local_KpdArr[Local_u8RowIdx][Local_u8ColumnIdx];
				
				/*wait until the key is released(polling or busy waiting)*/
				while(Local_u8PinState == DIO_u8_PIN_LOW)
 6ce:	99 81       	ldd	r25, Y+1	; 0x01
 6d0:	99 23       	and	r25, r25
 6d2:	b1 f3       	breq	.-20     	; 0x6c0 <KPD_u8GetPressedKey+0xbc>
				{
					DIO_u8GetPinValue(KPD_U8_PORT,Local_u8RowArr[Local_u8RowIdx],&Local_u8PinState);
				}
				
				return Local_u8PressedKey;
 6d4:	81 2f       	mov	r24, r17
 6d6:	0e c0       	rjmp	.+28     	; 0x6f4 <KPD_u8GetPressedKey+0xf0>

	for(Local_u8ColumnIdx = 0 ; Local_u8ColumnIdx < KPD_u8_COL_NUM ; Local_u8ColumnIdx++)
	{
		/* Activate the current column */
		DIO_u8SetPinValue(KPD_U8_PORT,Local_u8ColArr[Local_u8ColumnIdx],DIO_u8_PIN_LOW);
		for(Local_u8RowIdx = 0 ; Local_u8RowIdx < KPD_u8_ROW_NUM; Local_u8RowIdx++)
 6d8:	1f 5f       	subi	r17, 0xFF	; 255
 6da:	14 30       	cpi	r17, 0x04	; 4
 6dc:	78 f2       	brcs	.-98     	; 0x67c <KPD_u8GetPressedKey+0x78>
				return Local_u8PressedKey;
			}
		}
		
		/* Deactivate the current column*/
		DIO_u8SetPinValue(KPD_U8_PORT,Local_u8ColArr[Local_u8ColumnIdx],DIO_u8_PIN_HIGH);
 6de:	41 e0       	ldi	r20, 0x01	; 1
 6e0:	6a 2d       	mov	r22, r10
 6e2:	82 e0       	ldi	r24, 0x02	; 2
 6e4:	0e 94 0a 04 	call	0x814	; 0x814 <DIO_u8SetPinValue>
	uint8_t Local_u8ColArr[KPD_u8_COL_NUM]={KPD_u8_C0_PIN,KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN};
	uint8_t Local_u8RowArr[KPD_u8_ROW_NUM]={KPD_u8_R0_PIN,KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN};
		
	uint8_t Local_KpdArr[KPD_u8_ROW_NUM][KPD_u8_COL_NUM] = KPD_u8_BUTTON_VAL;

	for(Local_u8ColumnIdx = 0 ; Local_u8ColumnIdx < KPD_u8_COL_NUM ; Local_u8ColumnIdx++)
 6e8:	b3 94       	inc	r11
 6ea:	93 e0       	ldi	r25, 0x03	; 3
 6ec:	9b 15       	cp	r25, r11
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <KPD_u8GetPressedKey+0xee>
 6f0:	b5 cf       	rjmp	.-150    	; 0x65c <KPD_u8GetPressedKey+0x58>
		
		/* Deactivate the current column*/
		DIO_u8SetPinValue(KPD_U8_PORT,Local_u8ColArr[Local_u8ColumnIdx],DIO_u8_PIN_HIGH);
	}
	
	return Local_u8PressedKey;
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	69 96       	adiw	r28, 0x19	; 25
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	f8 94       	cli
 6fa:	de bf       	out	0x3e, r29	; 62
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	cd bf       	out	0x3d, r28	; 61
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	ff 90       	pop	r15
 70a:	ef 90       	pop	r14
 70c:	df 90       	pop	r13
 70e:	cf 90       	pop	r12
 710:	bf 90       	pop	r11
 712:	af 90       	pop	r10
 714:	08 95       	ret

00000716 <DIO_u8SetPinDirection>:
		  case DIO_u8_PORTD: DDRD=Copy_u8Direction;break;
		  default:Local_u8ErrorState=NOK;break;
	  }
	  
	  return Local_u8ErrorState;
  }
 716:	68 30       	cpi	r22, 0x08	; 8
 718:	08 f0       	brcs	.+2      	; 0x71c <DIO_u8SetPinDirection+0x6>
 71a:	76 c0       	rjmp	.+236    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 71c:	41 11       	cpse	r20, r1
 71e:	3c c0       	rjmp	.+120    	; 0x798 <DIO_u8SetPinDirection+0x82>
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	99 f0       	breq	.+38     	; 0x74a <DIO_u8SetPinDirection+0x34>
 724:	28 f0       	brcs	.+10     	; 0x730 <DIO_u8SetPinDirection+0x1a>
 726:	82 30       	cpi	r24, 0x02	; 2
 728:	e9 f0       	breq	.+58     	; 0x764 <DIO_u8SetPinDirection+0x4e>
 72a:	83 30       	cpi	r24, 0x03	; 3
 72c:	41 f1       	breq	.+80     	; 0x77e <DIO_u8SetPinDirection+0x68>
 72e:	6e c0       	rjmp	.+220    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 730:	2a b3       	in	r18, 0x1a	; 26
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_u8SetPinDirection+0x26>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	6a 95       	dec	r22
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_u8SetPinDirection+0x22>
 740:	80 95       	com	r24
 742:	82 23       	and	r24, r18
 744:	8a bb       	out	0x1a, r24	; 26
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret
 74a:	27 b3       	in	r18, 0x17	; 23
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_u8SetPinDirection+0x40>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	6a 95       	dec	r22
 758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_u8SetPinDirection+0x3c>
 75a:	80 95       	com	r24
 75c:	82 23       	and	r24, r18
 75e:	87 bb       	out	0x17, r24	; 23
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	08 95       	ret
 764:	24 b3       	in	r18, 0x14	; 20
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_u8SetPinDirection+0x5a>
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	6a 95       	dec	r22
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_u8SetPinDirection+0x56>
 774:	80 95       	com	r24
 776:	82 23       	and	r24, r18
 778:	84 bb       	out	0x14, r24	; 20
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	08 95       	ret
 77e:	21 b3       	in	r18, 0x11	; 17
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_u8SetPinDirection+0x74>
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	6a 95       	dec	r22
 78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_u8SetPinDirection+0x70>
 78e:	80 95       	com	r24
 790:	82 23       	and	r24, r18
 792:	81 bb       	out	0x11, r24	; 17
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	08 95       	ret
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	91 f0       	breq	.+36     	; 0x7c0 <DIO_u8SetPinDirection+0xaa>
 79c:	28 f0       	brcs	.+10     	; 0x7a8 <DIO_u8SetPinDirection+0x92>
 79e:	82 30       	cpi	r24, 0x02	; 2
 7a0:	d9 f0       	breq	.+54     	; 0x7d8 <DIO_u8SetPinDirection+0xc2>
 7a2:	83 30       	cpi	r24, 0x03	; 3
 7a4:	29 f1       	breq	.+74     	; 0x7f0 <DIO_u8SetPinDirection+0xda>
 7a6:	34 c0       	rjmp	.+104    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7a8:	2a b3       	in	r18, 0x1a	; 26
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_u8SetPinDirection+0x9e>
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	6a 95       	dec	r22
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_u8SetPinDirection+0x9a>
 7b8:	82 2b       	or	r24, r18
 7ba:	8a bb       	out	0x1a, r24	; 26
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	08 95       	ret
 7c0:	27 b3       	in	r18, 0x17	; 23
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_u8SetPinDirection+0xb6>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	6a 95       	dec	r22
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_u8SetPinDirection+0xb2>
 7d0:	82 2b       	or	r24, r18
 7d2:	87 bb       	out	0x17, r24	; 23
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	08 95       	ret
 7d8:	24 b3       	in	r18, 0x14	; 20
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_u8SetPinDirection+0xce>
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	6a 95       	dec	r22
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_u8SetPinDirection+0xca>
 7e8:	82 2b       	or	r24, r18
 7ea:	84 bb       	out	0x14, r24	; 20
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	08 95       	ret
 7f0:	21 b3       	in	r18, 0x11	; 17
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_u8SetPinDirection+0xe6>
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	6a 95       	dec	r22
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_u8SetPinDirection+0xe2>
 800:	82 2b       	or	r24, r18
 802:	81 bb       	out	0x11, r24	; 17
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	08 95       	ret
 808:	82 e0       	ldi	r24, 0x02	; 2
 80a:	08 95       	ret
 80c:	82 e0       	ldi	r24, 0x02	; 2
 80e:	08 95       	ret
 810:	82 e0       	ldi	r24, 0x02	; 2
 812:	08 95       	ret

00000814 <DIO_u8SetPinValue>:

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
	if(Copy_u8PinNumber<=DIO_u8_PIN7){
 814:	68 30       	cpi	r22, 0x08	; 8
 816:	08 f0       	brcs	.+2      	; 0x81a <DIO_u8SetPinValue+0x6>
 818:	78 c0       	rjmp	.+240    	; 0x90a <__stack+0xab>
		if (Copy_u8Value==DIO_u8_PIN_LOW)
 81a:	41 11       	cpse	r20, r1
 81c:	3c c0       	rjmp	.+120    	; 0x896 <__stack+0x37>
		{
			switch(Copy_u8Port)
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	99 f0       	breq	.+38     	; 0x848 <DIO_u8SetPinValue+0x34>
 822:	28 f0       	brcs	.+10     	; 0x82e <DIO_u8SetPinValue+0x1a>
 824:	82 30       	cpi	r24, 0x02	; 2
 826:	e9 f0       	breq	.+58     	; 0x862 <__stack+0x3>
 828:	83 30       	cpi	r24, 0x03	; 3
 82a:	41 f1       	breq	.+80     	; 0x87c <__stack+0x1d>
 82c:	70 c0       	rjmp	.+224    	; 0x90e <__stack+0xaf>
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
 82e:	2b b3       	in	r18, 0x1b	; 27
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	02 c0       	rjmp	.+4      	; 0x83a <DIO_u8SetPinValue+0x26>
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	6a 95       	dec	r22
 83c:	e2 f7       	brpl	.-8      	; 0x836 <DIO_u8SetPinValue+0x22>
 83e:	80 95       	com	r24
 840:	82 23       	and	r24, r18
 842:	8b bb       	out	0x1b, r24	; 27
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 844:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8PinNumber<=DIO_u8_PIN7){
		if (Copy_u8Value==DIO_u8_PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
 846:	08 95       	ret
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
 848:	28 b3       	in	r18, 0x18	; 24
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <DIO_u8SetPinValue+0x40>
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	6a 95       	dec	r22
 856:	e2 f7       	brpl	.-8      	; 0x850 <DIO_u8SetPinValue+0x3c>
 858:	80 95       	com	r24
 85a:	82 23       	and	r24, r18
 85c:	88 bb       	out	0x18, r24	; 24
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 85e:	81 e0       	ldi	r24, 0x01	; 1
		if (Copy_u8Value==DIO_u8_PIN_LOW)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
 860:	08 95       	ret
				case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8PinNumber);break;
 862:	25 b3       	in	r18, 0x15	; 21
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	6a 95       	dec	r22
 870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
 872:	80 95       	com	r24
 874:	82 23       	and	r24, r18
 876:	85 bb       	out	0x15, r24	; 21
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 878:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8PinNumber);break;
 87a:	08 95       	ret
				case DIO_u8_PORTD: CLR_BIT(PORTD,Copy_u8PinNumber);break;
 87c:	22 b3       	in	r18, 0x12	; 18
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	6a 95       	dec	r22
 88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
 88c:	80 95       	com	r24
 88e:	82 23       	and	r24, r18
 890:	82 bb       	out	0x12, r24	; 18
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 892:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8PinNumber);break;
				case DIO_u8_PORTD: CLR_BIT(PORTD,Copy_u8PinNumber);break;
 894:	08 95       	ret
				default:Local_u8ErrorState=NOK; break;  /*Error if the given port is not founded*/
			}
		}
		else if(Copy_u8Value==DIO_u8_PIN_HIGH)
 896:	41 30       	cpi	r20, 0x01	; 1
 898:	e1 f5       	brne	.+120    	; 0x912 <__stack+0xb3>
		{
			switch(Copy_u8Port)
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	91 f0       	breq	.+36     	; 0x8c2 <__stack+0x63>
 89e:	28 f0       	brcs	.+10     	; 0x8aa <__stack+0x4b>
 8a0:	82 30       	cpi	r24, 0x02	; 2
 8a2:	d9 f0       	breq	.+54     	; 0x8da <__stack+0x7b>
 8a4:	83 30       	cpi	r24, 0x03	; 3
 8a6:	29 f1       	breq	.+74     	; 0x8f2 <__stack+0x93>
 8a8:	36 c0       	rjmp	.+108    	; 0x916 <__stack+0xb7>
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
 8aa:	2b b3       	in	r18, 0x1b	; 27
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	6a 95       	dec	r22
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	82 2b       	or	r24, r18
 8bc:	8b bb       	out	0x1b, r24	; 27
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 8be:	81 e0       	ldi	r24, 0x01	; 1
		}
		else if(Copy_u8Value==DIO_u8_PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
 8c0:	08 95       	ret
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
 8c2:	28 b3       	in	r18, 0x18	; 24
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	6a 95       	dec	r22
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
 8d2:	82 2b       	or	r24, r18
 8d4:	88 bb       	out	0x18, r24	; 24
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
		else if(Copy_u8Value==DIO_u8_PIN_HIGH)
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
 8d8:	08 95       	ret
				case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8PinNumber);break;
 8da:	25 b3       	in	r18, 0x15	; 21
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	6a 95       	dec	r22
 8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <__stack+0x83>
 8ea:	82 2b       	or	r24, r18
 8ec:	85 bb       	out	0x15, r24	; 21
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 8ee:	81 e0       	ldi	r24, 0x01	; 1
		{
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8PinNumber);break;
 8f0:	08 95       	ret
				case DIO_u8_PORTD: SET_BIT(PORTD,Copy_u8PinNumber);break;
 8f2:	22 b3       	in	r18, 0x12	; 18
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	6a 95       	dec	r22
 900:	e2 f7       	brpl	.-8      	; 0x8fa <__stack+0x9b>
 902:	82 2b       	or	r24, r18
 904:	82 bb       	out	0x12, r24	; 18
/* IF U DON'T USE THE PORT FILE JUST UNCOMMENT THE SET_PIN_VALUE & SET_PORT_VALUE*/

uint8_t DIO_u8SetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t Copy_u8Value)

{
	uint8_t Local_u8ErrorState = OK;
 906:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8Port)
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8PinNumber);break;
				case DIO_u8_PORTD: SET_BIT(PORTD,Copy_u8PinNumber);break;
 908:	08 95       	ret
		}
	}
	else
	{
		/*Error Pin Number Input */
		Local_u8ErrorState =NOK;
 90a:	82 e0       	ldi	r24, 0x02	; 2
 90c:	08 95       	ret
			{
				case DIO_u8_PORTA: CLR_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: CLR_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: CLR_BIT(PORTC,Copy_u8PinNumber);break;
				case DIO_u8_PORTD: CLR_BIT(PORTD,Copy_u8PinNumber);break;
				default:Local_u8ErrorState=NOK; break;  /*Error if the given port is not founded*/
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	08 95       	ret
			}
		}
		else
		{
			/* Error Direction Input*/
			Local_u8ErrorState =NOK;
 912:	82 e0       	ldi	r24, 0x02	; 2
 914:	08 95       	ret
			{
				case DIO_u8_PORTA: SET_BIT(PORTA,Copy_u8PinNumber);break;
				case DIO_u8_PORTB: SET_BIT(PORTB,Copy_u8PinNumber);break;
				case DIO_u8_PORTC: SET_BIT(PORTC,Copy_u8PinNumber);break;
				case DIO_u8_PORTD: SET_BIT(PORTD,Copy_u8PinNumber);break;
				default:Local_u8ErrorState=NOK;break; /*Error if the given port is not founded*/
 916:	82 e0       	ldi	r24, 0x02	; 2
	{
		/*Error Pin Number Input */
		Local_u8ErrorState =NOK;
	}
	return Local_u8ErrorState;
}
 918:	08 95       	ret

0000091a <DIO_u8SetPortValue>:

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
	switch(Copy_u8Port)
 91a:	81 30       	cpi	r24, 0x01	; 1
 91c:	49 f0       	breq	.+18     	; 0x930 <DIO_u8SetPortValue+0x16>
 91e:	28 f0       	brcs	.+10     	; 0x92a <DIO_u8SetPortValue+0x10>
 920:	82 30       	cpi	r24, 0x02	; 2
 922:	49 f0       	breq	.+18     	; 0x936 <DIO_u8SetPortValue+0x1c>
 924:	83 30       	cpi	r24, 0x03	; 3
 926:	51 f0       	breq	.+20     	; 0x93c <DIO_u8SetPortValue+0x22>
 928:	0c c0       	rjmp	.+24     	; 0x942 <DIO_u8SetPortValue+0x28>
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
 92a:	6b bb       	out	0x1b, r22	; 27
	return Local_u8ErrorState;
}

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
 92c:	81 e0       	ldi	r24, 0x01	; 1
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
 92e:	08 95       	ret
		case DIO_u8_PORTB: PORTB=Copy_u8Value;break;
 930:	68 bb       	out	0x18, r22	; 24
	return Local_u8ErrorState;
}

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
 932:	81 e0       	ldi	r24, 0x01	; 1
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
		case DIO_u8_PORTB: PORTB=Copy_u8Value;break;
 934:	08 95       	ret
		case DIO_u8_PORTC: PORTC=Copy_u8Value;break;
 936:	65 bb       	out	0x15, r22	; 21
	return Local_u8ErrorState;
}

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
 938:	81 e0       	ldi	r24, 0x01	; 1
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
		case DIO_u8_PORTB: PORTB=Copy_u8Value;break;
		case DIO_u8_PORTC: PORTC=Copy_u8Value;break;
 93a:	08 95       	ret
		case DIO_u8_PORTD: PORTD=Copy_u8Value;break;
 93c:	62 bb       	out	0x12, r22	; 18
	return Local_u8ErrorState;
}

uint8_t DIO_u8SetPortValue(uint8_t Copy_u8Port,uint8_t Copy_u8Value)
{
	uint8_t Local_u8ErrorState = OK;
 93e:	81 e0       	ldi	r24, 0x01	; 1
	switch(Copy_u8Port)
	{
		case DIO_u8_PORTA: PORTA=Copy_u8Value;break;
		case DIO_u8_PORTB: PORTB=Copy_u8Value;break;
		case DIO_u8_PORTC: PORTC=Copy_u8Value;break;
		case DIO_u8_PORTD: PORTD=Copy_u8Value;break;
 940:	08 95       	ret
		default:Local_u8ErrorState=NOK;
 942:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return Local_u8ErrorState;
}
 944:	08 95       	ret

00000946 <DIO_u8GetPinValue>:

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
	if(Copy_u8PinNumber<=DIO_u8_PIN7)
 946:	68 30       	cpi	r22, 0x08	; 8
 948:	c0 f5       	brcc	.+112    	; 0x9ba <DIO_u8GetPinValue+0x74>
	{
		switch(Copy_u8Port)
 94a:	81 30       	cpi	r24, 0x01	; 1
 94c:	91 f0       	breq	.+36     	; 0x972 <DIO_u8GetPinValue+0x2c>
 94e:	28 f0       	brcs	.+10     	; 0x95a <DIO_u8GetPinValue+0x14>
 950:	82 30       	cpi	r24, 0x02	; 2
 952:	d9 f0       	breq	.+54     	; 0x98a <DIO_u8GetPinValue+0x44>
 954:	83 30       	cpi	r24, 0x03	; 3
 956:	29 f1       	breq	.+74     	; 0x9a2 <DIO_u8GetPinValue+0x5c>
 958:	32 c0       	rjmp	.+100    	; 0x9be <DIO_u8GetPinValue+0x78>
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
 95a:	89 b3       	in	r24, 0x19	; 25
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <DIO_u8GetPinValue+0x1e>
 960:	95 95       	asr	r25
 962:	87 95       	ror	r24
 964:	6a 95       	dec	r22
 966:	e2 f7       	brpl	.-8      	; 0x960 <DIO_u8GetPinValue+0x1a>
 968:	81 70       	andi	r24, 0x01	; 1
 96a:	fa 01       	movw	r30, r20
 96c:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
 96e:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8PinNumber<=DIO_u8_PIN7)
	{
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
 970:	08 95       	ret
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
 972:	86 b3       	in	r24, 0x16	; 22
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	02 c0       	rjmp	.+4      	; 0x97c <DIO_u8GetPinValue+0x36>
 978:	95 95       	asr	r25
 97a:	87 95       	ror	r24
 97c:	6a 95       	dec	r22
 97e:	e2 f7       	brpl	.-8      	; 0x978 <DIO_u8GetPinValue+0x32>
 980:	81 70       	andi	r24, 0x01	; 1
 982:	fa 01       	movw	r30, r20
 984:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
 986:	81 e0       	ldi	r24, 0x01	; 1
	if(Copy_u8PinNumber<=DIO_u8_PIN7)
	{
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
 988:	08 95       	ret
			case DIO_u8_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8PinNumber) ;break;
 98a:	83 b3       	in	r24, 0x13	; 19
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	02 c0       	rjmp	.+4      	; 0x994 <DIO_u8GetPinValue+0x4e>
 990:	95 95       	asr	r25
 992:	87 95       	ror	r24
 994:	6a 95       	dec	r22
 996:	e2 f7       	brpl	.-8      	; 0x990 <DIO_u8GetPinValue+0x4a>
 998:	81 70       	andi	r24, 0x01	; 1
 99a:	fa 01       	movw	r30, r20
 99c:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
 99e:	81 e0       	ldi	r24, 0x01	; 1
	{
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8PinNumber) ;break;
 9a0:	08 95       	ret
			case DIO_u8_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8PinNumber) ;break;
 9a2:	80 b3       	in	r24, 0x10	; 16
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <DIO_u8GetPinValue+0x66>
 9a8:	95 95       	asr	r25
 9aa:	87 95       	ror	r24
 9ac:	6a 95       	dec	r22
 9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <DIO_u8GetPinValue+0x62>
 9b0:	81 70       	andi	r24, 0x01	; 1
 9b2:	fa 01       	movw	r30, r20
 9b4:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

uint8_t DIO_u8GetPinValue(uint8_t Copy_u8Port,uint8_t Copy_u8PinNumber,uint8_t* Copy_pu8Value)
{
	uint8_t Local_u8ErrorState =OK;
 9b6:	81 e0       	ldi	r24, 0x01	; 1
		switch(Copy_u8Port)
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8PinNumber) ;break;
 9b8:	08 95       	ret
			default:Local_u8ErrorState=NOK;break; /*Error if the given port is not founded*/
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 9ba:	82 e0       	ldi	r24, 0x02	; 2
 9bc:	08 95       	ret
		{
			case DIO_u8_PORTA:*Copy_pu8Value=GET_BIT(PINA,Copy_u8PinNumber) ;break;     /*Get the value og the pin*/
			case DIO_u8_PORTB:*Copy_pu8Value=GET_BIT(PINB,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTC:*Copy_pu8Value=GET_BIT(PINC,Copy_u8PinNumber) ;break;
			case DIO_u8_PORTD:*Copy_pu8Value=GET_BIT(PIND,Copy_u8PinNumber) ;break;
			default:Local_u8ErrorState=NOK;break; /*Error if the given port is not founded*/
 9be:	82 e0       	ldi	r24, 0x02	; 2
	{
		Local_u8ErrorState=NOK;
	}
	return Local_u8ErrorState;
	
 9c0:	08 95       	ret

000009c2 <__subsf3>:
 9c2:	50 58       	subi	r21, 0x80	; 128

000009c4 <__addsf3>:
 9c4:	bb 27       	eor	r27, r27
 9c6:	aa 27       	eor	r26, r26
 9c8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__addsf3x>
 9cc:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_round>
 9d0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fp_pscA>
 9d4:	38 f0       	brcs	.+14     	; 0x9e4 <__addsf3+0x20>
 9d6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fp_pscB>
 9da:	20 f0       	brcs	.+8      	; 0x9e4 <__addsf3+0x20>
 9dc:	39 f4       	brne	.+14     	; 0x9ec <__addsf3+0x28>
 9de:	9f 3f       	cpi	r25, 0xFF	; 255
 9e0:	19 f4       	brne	.+6      	; 0x9e8 <__addsf3+0x24>
 9e2:	26 f4       	brtc	.+8      	; 0x9ec <__addsf3+0x28>
 9e4:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_nan>
 9e8:	0e f4       	brtc	.+2      	; 0x9ec <__addsf3+0x28>
 9ea:	e0 95       	com	r30
 9ec:	e7 fb       	bst	r30, 7
 9ee:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_inf>

000009f2 <__addsf3x>:
 9f2:	e9 2f       	mov	r30, r25
 9f4:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_split3>
 9f8:	58 f3       	brcs	.-42     	; 0x9d0 <__addsf3+0xc>
 9fa:	ba 17       	cp	r27, r26
 9fc:	62 07       	cpc	r22, r18
 9fe:	73 07       	cpc	r23, r19
 a00:	84 07       	cpc	r24, r20
 a02:	95 07       	cpc	r25, r21
 a04:	20 f0       	brcs	.+8      	; 0xa0e <__addsf3x+0x1c>
 a06:	79 f4       	brne	.+30     	; 0xa26 <__addsf3x+0x34>
 a08:	a6 f5       	brtc	.+104    	; 0xa72 <__addsf3x+0x80>
 a0a:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_zero>
 a0e:	0e f4       	brtc	.+2      	; 0xa12 <__addsf3x+0x20>
 a10:	e0 95       	com	r30
 a12:	0b 2e       	mov	r0, r27
 a14:	ba 2f       	mov	r27, r26
 a16:	a0 2d       	mov	r26, r0
 a18:	0b 01       	movw	r0, r22
 a1a:	b9 01       	movw	r22, r18
 a1c:	90 01       	movw	r18, r0
 a1e:	0c 01       	movw	r0, r24
 a20:	ca 01       	movw	r24, r20
 a22:	a0 01       	movw	r20, r0
 a24:	11 24       	eor	r1, r1
 a26:	ff 27       	eor	r31, r31
 a28:	59 1b       	sub	r21, r25
 a2a:	99 f0       	breq	.+38     	; 0xa52 <__addsf3x+0x60>
 a2c:	59 3f       	cpi	r21, 0xF9	; 249
 a2e:	50 f4       	brcc	.+20     	; 0xa44 <__addsf3x+0x52>
 a30:	50 3e       	cpi	r21, 0xE0	; 224
 a32:	68 f1       	brcs	.+90     	; 0xa8e <__addsf3x+0x9c>
 a34:	1a 16       	cp	r1, r26
 a36:	f0 40       	sbci	r31, 0x00	; 0
 a38:	a2 2f       	mov	r26, r18
 a3a:	23 2f       	mov	r18, r19
 a3c:	34 2f       	mov	r19, r20
 a3e:	44 27       	eor	r20, r20
 a40:	58 5f       	subi	r21, 0xF8	; 248
 a42:	f3 cf       	rjmp	.-26     	; 0xa2a <__addsf3x+0x38>
 a44:	46 95       	lsr	r20
 a46:	37 95       	ror	r19
 a48:	27 95       	ror	r18
 a4a:	a7 95       	ror	r26
 a4c:	f0 40       	sbci	r31, 0x00	; 0
 a4e:	53 95       	inc	r21
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__addsf3x+0x52>
 a52:	7e f4       	brtc	.+30     	; 0xa72 <__addsf3x+0x80>
 a54:	1f 16       	cp	r1, r31
 a56:	ba 0b       	sbc	r27, r26
 a58:	62 0b       	sbc	r22, r18
 a5a:	73 0b       	sbc	r23, r19
 a5c:	84 0b       	sbc	r24, r20
 a5e:	ba f0       	brmi	.+46     	; 0xa8e <__addsf3x+0x9c>
 a60:	91 50       	subi	r25, 0x01	; 1
 a62:	a1 f0       	breq	.+40     	; 0xa8c <__addsf3x+0x9a>
 a64:	ff 0f       	add	r31, r31
 a66:	bb 1f       	adc	r27, r27
 a68:	66 1f       	adc	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	c2 f7       	brpl	.-16     	; 0xa60 <__addsf3x+0x6e>
 a70:	0e c0       	rjmp	.+28     	; 0xa8e <__addsf3x+0x9c>
 a72:	ba 0f       	add	r27, r26
 a74:	62 1f       	adc	r22, r18
 a76:	73 1f       	adc	r23, r19
 a78:	84 1f       	adc	r24, r20
 a7a:	48 f4       	brcc	.+18     	; 0xa8e <__addsf3x+0x9c>
 a7c:	87 95       	ror	r24
 a7e:	77 95       	ror	r23
 a80:	67 95       	ror	r22
 a82:	b7 95       	ror	r27
 a84:	f7 95       	ror	r31
 a86:	9e 3f       	cpi	r25, 0xFE	; 254
 a88:	08 f0       	brcs	.+2      	; 0xa8c <__addsf3x+0x9a>
 a8a:	b0 cf       	rjmp	.-160    	; 0x9ec <__addsf3+0x28>
 a8c:	93 95       	inc	r25
 a8e:	88 0f       	add	r24, r24
 a90:	08 f0       	brcs	.+2      	; 0xa94 <__addsf3x+0xa2>
 a92:	99 27       	eor	r25, r25
 a94:	ee 0f       	add	r30, r30
 a96:	97 95       	ror	r25
 a98:	87 95       	ror	r24
 a9a:	08 95       	ret

00000a9c <__cmpsf2>:
 a9c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fp_cmp>
 aa0:	08 f4       	brcc	.+2      	; 0xaa4 <__cmpsf2+0x8>
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	08 95       	ret

00000aa6 <__fixsfsi>:
 aa6:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fixunssfsi>
 aaa:	68 94       	set
 aac:	b1 11       	cpse	r27, r1
 aae:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_szero>
 ab2:	08 95       	ret

00000ab4 <__fixunssfsi>:
 ab4:	0e 94 1a 06 	call	0xc34	; 0xc34 <__fp_splitA>
 ab8:	88 f0       	brcs	.+34     	; 0xadc <__fixunssfsi+0x28>
 aba:	9f 57       	subi	r25, 0x7F	; 127
 abc:	98 f0       	brcs	.+38     	; 0xae4 <__fixunssfsi+0x30>
 abe:	b9 2f       	mov	r27, r25
 ac0:	99 27       	eor	r25, r25
 ac2:	b7 51       	subi	r27, 0x17	; 23
 ac4:	b0 f0       	brcs	.+44     	; 0xaf2 <__fixunssfsi+0x3e>
 ac6:	e1 f0       	breq	.+56     	; 0xb00 <__fixunssfsi+0x4c>
 ac8:	66 0f       	add	r22, r22
 aca:	77 1f       	adc	r23, r23
 acc:	88 1f       	adc	r24, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	1a f0       	brmi	.+6      	; 0xad8 <__fixunssfsi+0x24>
 ad2:	ba 95       	dec	r27
 ad4:	c9 f7       	brne	.-14     	; 0xac8 <__fixunssfsi+0x14>
 ad6:	14 c0       	rjmp	.+40     	; 0xb00 <__fixunssfsi+0x4c>
 ad8:	b1 30       	cpi	r27, 0x01	; 1
 ada:	91 f0       	breq	.+36     	; 0xb00 <__fixunssfsi+0x4c>
 adc:	0e 94 34 06 	call	0xc68	; 0xc68 <__fp_zero>
 ae0:	b1 e0       	ldi	r27, 0x01	; 1
 ae2:	08 95       	ret
 ae4:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_zero>
 ae8:	67 2f       	mov	r22, r23
 aea:	78 2f       	mov	r23, r24
 aec:	88 27       	eor	r24, r24
 aee:	b8 5f       	subi	r27, 0xF8	; 248
 af0:	39 f0       	breq	.+14     	; 0xb00 <__fixunssfsi+0x4c>
 af2:	b9 3f       	cpi	r27, 0xF9	; 249
 af4:	cc f3       	brlt	.-14     	; 0xae8 <__fixunssfsi+0x34>
 af6:	86 95       	lsr	r24
 af8:	77 95       	ror	r23
 afa:	67 95       	ror	r22
 afc:	b3 95       	inc	r27
 afe:	d9 f7       	brne	.-10     	; 0xaf6 <__fixunssfsi+0x42>
 b00:	3e f4       	brtc	.+14     	; 0xb10 <__fixunssfsi+0x5c>
 b02:	90 95       	com	r25
 b04:	80 95       	com	r24
 b06:	70 95       	com	r23
 b08:	61 95       	neg	r22
 b0a:	7f 4f       	sbci	r23, 0xFF	; 255
 b0c:	8f 4f       	sbci	r24, 0xFF	; 255
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	08 95       	ret

00000b12 <__floatunsisf>:
 b12:	e8 94       	clt
 b14:	09 c0       	rjmp	.+18     	; 0xb28 <__floatsisf+0x12>

00000b16 <__floatsisf>:
 b16:	97 fb       	bst	r25, 7
 b18:	3e f4       	brtc	.+14     	; 0xb28 <__floatsisf+0x12>
 b1a:	90 95       	com	r25
 b1c:	80 95       	com	r24
 b1e:	70 95       	com	r23
 b20:	61 95       	neg	r22
 b22:	7f 4f       	sbci	r23, 0xFF	; 255
 b24:	8f 4f       	sbci	r24, 0xFF	; 255
 b26:	9f 4f       	sbci	r25, 0xFF	; 255
 b28:	99 23       	and	r25, r25
 b2a:	a9 f0       	breq	.+42     	; 0xb56 <__floatsisf+0x40>
 b2c:	f9 2f       	mov	r31, r25
 b2e:	96 e9       	ldi	r25, 0x96	; 150
 b30:	bb 27       	eor	r27, r27
 b32:	93 95       	inc	r25
 b34:	f6 95       	lsr	r31
 b36:	87 95       	ror	r24
 b38:	77 95       	ror	r23
 b3a:	67 95       	ror	r22
 b3c:	b7 95       	ror	r27
 b3e:	f1 11       	cpse	r31, r1
 b40:	f8 cf       	rjmp	.-16     	; 0xb32 <__floatsisf+0x1c>
 b42:	fa f4       	brpl	.+62     	; 0xb82 <__floatsisf+0x6c>
 b44:	bb 0f       	add	r27, r27
 b46:	11 f4       	brne	.+4      	; 0xb4c <__floatsisf+0x36>
 b48:	60 ff       	sbrs	r22, 0
 b4a:	1b c0       	rjmp	.+54     	; 0xb82 <__floatsisf+0x6c>
 b4c:	6f 5f       	subi	r22, 0xFF	; 255
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255
 b50:	8f 4f       	sbci	r24, 0xFF	; 255
 b52:	9f 4f       	sbci	r25, 0xFF	; 255
 b54:	16 c0       	rjmp	.+44     	; 0xb82 <__floatsisf+0x6c>
 b56:	88 23       	and	r24, r24
 b58:	11 f0       	breq	.+4      	; 0xb5e <__floatsisf+0x48>
 b5a:	96 e9       	ldi	r25, 0x96	; 150
 b5c:	11 c0       	rjmp	.+34     	; 0xb80 <__floatsisf+0x6a>
 b5e:	77 23       	and	r23, r23
 b60:	21 f0       	breq	.+8      	; 0xb6a <__floatsisf+0x54>
 b62:	9e e8       	ldi	r25, 0x8E	; 142
 b64:	87 2f       	mov	r24, r23
 b66:	76 2f       	mov	r23, r22
 b68:	05 c0       	rjmp	.+10     	; 0xb74 <__floatsisf+0x5e>
 b6a:	66 23       	and	r22, r22
 b6c:	71 f0       	breq	.+28     	; 0xb8a <__floatsisf+0x74>
 b6e:	96 e8       	ldi	r25, 0x86	; 134
 b70:	86 2f       	mov	r24, r22
 b72:	70 e0       	ldi	r23, 0x00	; 0
 b74:	60 e0       	ldi	r22, 0x00	; 0
 b76:	2a f0       	brmi	.+10     	; 0xb82 <__floatsisf+0x6c>
 b78:	9a 95       	dec	r25
 b7a:	66 0f       	add	r22, r22
 b7c:	77 1f       	adc	r23, r23
 b7e:	88 1f       	adc	r24, r24
 b80:	da f7       	brpl	.-10     	; 0xb78 <__floatsisf+0x62>
 b82:	88 0f       	add	r24, r24
 b84:	96 95       	lsr	r25
 b86:	87 95       	ror	r24
 b88:	97 f9       	bld	r25, 7
 b8a:	08 95       	ret

00000b8c <__fp_cmp>:
 b8c:	99 0f       	add	r25, r25
 b8e:	00 08       	sbc	r0, r0
 b90:	55 0f       	add	r21, r21
 b92:	aa 0b       	sbc	r26, r26
 b94:	e0 e8       	ldi	r30, 0x80	; 128
 b96:	fe ef       	ldi	r31, 0xFE	; 254
 b98:	16 16       	cp	r1, r22
 b9a:	17 06       	cpc	r1, r23
 b9c:	e8 07       	cpc	r30, r24
 b9e:	f9 07       	cpc	r31, r25
 ba0:	c0 f0       	brcs	.+48     	; 0xbd2 <__fp_cmp+0x46>
 ba2:	12 16       	cp	r1, r18
 ba4:	13 06       	cpc	r1, r19
 ba6:	e4 07       	cpc	r30, r20
 ba8:	f5 07       	cpc	r31, r21
 baa:	98 f0       	brcs	.+38     	; 0xbd2 <__fp_cmp+0x46>
 bac:	62 1b       	sub	r22, r18
 bae:	73 0b       	sbc	r23, r19
 bb0:	84 0b       	sbc	r24, r20
 bb2:	95 0b       	sbc	r25, r21
 bb4:	39 f4       	brne	.+14     	; 0xbc4 <__fp_cmp+0x38>
 bb6:	0a 26       	eor	r0, r26
 bb8:	61 f0       	breq	.+24     	; 0xbd2 <__fp_cmp+0x46>
 bba:	23 2b       	or	r18, r19
 bbc:	24 2b       	or	r18, r20
 bbe:	25 2b       	or	r18, r21
 bc0:	21 f4       	brne	.+8      	; 0xbca <__fp_cmp+0x3e>
 bc2:	08 95       	ret
 bc4:	0a 26       	eor	r0, r26
 bc6:	09 f4       	brne	.+2      	; 0xbca <__fp_cmp+0x3e>
 bc8:	a1 40       	sbci	r26, 0x01	; 1
 bca:	a6 95       	lsr	r26
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	81 1d       	adc	r24, r1
 bd0:	81 1d       	adc	r24, r1
 bd2:	08 95       	ret

00000bd4 <__fp_inf>:
 bd4:	97 f9       	bld	r25, 7
 bd6:	9f 67       	ori	r25, 0x7F	; 127
 bd8:	80 e8       	ldi	r24, 0x80	; 128
 bda:	70 e0       	ldi	r23, 0x00	; 0
 bdc:	60 e0       	ldi	r22, 0x00	; 0
 bde:	08 95       	ret

00000be0 <__fp_nan>:
 be0:	9f ef       	ldi	r25, 0xFF	; 255
 be2:	80 ec       	ldi	r24, 0xC0	; 192
 be4:	08 95       	ret

00000be6 <__fp_pscA>:
 be6:	00 24       	eor	r0, r0
 be8:	0a 94       	dec	r0
 bea:	16 16       	cp	r1, r22
 bec:	17 06       	cpc	r1, r23
 bee:	18 06       	cpc	r1, r24
 bf0:	09 06       	cpc	r0, r25
 bf2:	08 95       	ret

00000bf4 <__fp_pscB>:
 bf4:	00 24       	eor	r0, r0
 bf6:	0a 94       	dec	r0
 bf8:	12 16       	cp	r1, r18
 bfa:	13 06       	cpc	r1, r19
 bfc:	14 06       	cpc	r1, r20
 bfe:	05 06       	cpc	r0, r21
 c00:	08 95       	ret

00000c02 <__fp_round>:
 c02:	09 2e       	mov	r0, r25
 c04:	03 94       	inc	r0
 c06:	00 0c       	add	r0, r0
 c08:	11 f4       	brne	.+4      	; 0xc0e <__fp_round+0xc>
 c0a:	88 23       	and	r24, r24
 c0c:	52 f0       	brmi	.+20     	; 0xc22 <__fp_round+0x20>
 c0e:	bb 0f       	add	r27, r27
 c10:	40 f4       	brcc	.+16     	; 0xc22 <__fp_round+0x20>
 c12:	bf 2b       	or	r27, r31
 c14:	11 f4       	brne	.+4      	; 0xc1a <__fp_round+0x18>
 c16:	60 ff       	sbrs	r22, 0
 c18:	04 c0       	rjmp	.+8      	; 0xc22 <__fp_round+0x20>
 c1a:	6f 5f       	subi	r22, 0xFF	; 255
 c1c:	7f 4f       	sbci	r23, 0xFF	; 255
 c1e:	8f 4f       	sbci	r24, 0xFF	; 255
 c20:	9f 4f       	sbci	r25, 0xFF	; 255
 c22:	08 95       	ret

00000c24 <__fp_split3>:
 c24:	57 fd       	sbrc	r21, 7
 c26:	90 58       	subi	r25, 0x80	; 128
 c28:	44 0f       	add	r20, r20
 c2a:	55 1f       	adc	r21, r21
 c2c:	59 f0       	breq	.+22     	; 0xc44 <__fp_splitA+0x10>
 c2e:	5f 3f       	cpi	r21, 0xFF	; 255
 c30:	71 f0       	breq	.+28     	; 0xc4e <__fp_splitA+0x1a>
 c32:	47 95       	ror	r20

00000c34 <__fp_splitA>:
 c34:	88 0f       	add	r24, r24
 c36:	97 fb       	bst	r25, 7
 c38:	99 1f       	adc	r25, r25
 c3a:	61 f0       	breq	.+24     	; 0xc54 <__fp_splitA+0x20>
 c3c:	9f 3f       	cpi	r25, 0xFF	; 255
 c3e:	79 f0       	breq	.+30     	; 0xc5e <__fp_splitA+0x2a>
 c40:	87 95       	ror	r24
 c42:	08 95       	ret
 c44:	12 16       	cp	r1, r18
 c46:	13 06       	cpc	r1, r19
 c48:	14 06       	cpc	r1, r20
 c4a:	55 1f       	adc	r21, r21
 c4c:	f2 cf       	rjmp	.-28     	; 0xc32 <__fp_split3+0xe>
 c4e:	46 95       	lsr	r20
 c50:	f1 df       	rcall	.-30     	; 0xc34 <__fp_splitA>
 c52:	08 c0       	rjmp	.+16     	; 0xc64 <__fp_splitA+0x30>
 c54:	16 16       	cp	r1, r22
 c56:	17 06       	cpc	r1, r23
 c58:	18 06       	cpc	r1, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	f1 cf       	rjmp	.-30     	; 0xc40 <__fp_splitA+0xc>
 c5e:	86 95       	lsr	r24
 c60:	71 05       	cpc	r23, r1
 c62:	61 05       	cpc	r22, r1
 c64:	08 94       	sec
 c66:	08 95       	ret

00000c68 <__fp_zero>:
 c68:	e8 94       	clt

00000c6a <__fp_szero>:
 c6a:	bb 27       	eor	r27, r27
 c6c:	66 27       	eor	r22, r22
 c6e:	77 27       	eor	r23, r23
 c70:	cb 01       	movw	r24, r22
 c72:	97 f9       	bld	r25, 7
 c74:	08 95       	ret

00000c76 <__gesf2>:
 c76:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__fp_cmp>
 c7a:	08 f4       	brcc	.+2      	; 0xc7e <__gesf2+0x8>
 c7c:	8f ef       	ldi	r24, 0xFF	; 255
 c7e:	08 95       	ret

00000c80 <__mulsf3>:
 c80:	0e 94 53 06 	call	0xca6	; 0xca6 <__mulsf3x>
 c84:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_round>
 c88:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fp_pscA>
 c8c:	38 f0       	brcs	.+14     	; 0xc9c <__mulsf3+0x1c>
 c8e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fp_pscB>
 c92:	20 f0       	brcs	.+8      	; 0xc9c <__mulsf3+0x1c>
 c94:	95 23       	and	r25, r21
 c96:	11 f0       	breq	.+4      	; 0xc9c <__mulsf3+0x1c>
 c98:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_inf>
 c9c:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_nan>
 ca0:	11 24       	eor	r1, r1
 ca2:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_szero>

00000ca6 <__mulsf3x>:
 ca6:	0e 94 12 06 	call	0xc24	; 0xc24 <__fp_split3>
 caa:	70 f3       	brcs	.-36     	; 0xc88 <__mulsf3+0x8>

00000cac <__mulsf3_pse>:
 cac:	95 9f       	mul	r25, r21
 cae:	c1 f3       	breq	.-16     	; 0xca0 <__mulsf3+0x20>
 cb0:	95 0f       	add	r25, r21
 cb2:	50 e0       	ldi	r21, 0x00	; 0
 cb4:	55 1f       	adc	r21, r21
 cb6:	62 9f       	mul	r22, r18
 cb8:	f0 01       	movw	r30, r0
 cba:	72 9f       	mul	r23, r18
 cbc:	bb 27       	eor	r27, r27
 cbe:	f0 0d       	add	r31, r0
 cc0:	b1 1d       	adc	r27, r1
 cc2:	63 9f       	mul	r22, r19
 cc4:	aa 27       	eor	r26, r26
 cc6:	f0 0d       	add	r31, r0
 cc8:	b1 1d       	adc	r27, r1
 cca:	aa 1f       	adc	r26, r26
 ccc:	64 9f       	mul	r22, r20
 cce:	66 27       	eor	r22, r22
 cd0:	b0 0d       	add	r27, r0
 cd2:	a1 1d       	adc	r26, r1
 cd4:	66 1f       	adc	r22, r22
 cd6:	82 9f       	mul	r24, r18
 cd8:	22 27       	eor	r18, r18
 cda:	b0 0d       	add	r27, r0
 cdc:	a1 1d       	adc	r26, r1
 cde:	62 1f       	adc	r22, r18
 ce0:	73 9f       	mul	r23, r19
 ce2:	b0 0d       	add	r27, r0
 ce4:	a1 1d       	adc	r26, r1
 ce6:	62 1f       	adc	r22, r18
 ce8:	83 9f       	mul	r24, r19
 cea:	a0 0d       	add	r26, r0
 cec:	61 1d       	adc	r22, r1
 cee:	22 1f       	adc	r18, r18
 cf0:	74 9f       	mul	r23, r20
 cf2:	33 27       	eor	r19, r19
 cf4:	a0 0d       	add	r26, r0
 cf6:	61 1d       	adc	r22, r1
 cf8:	23 1f       	adc	r18, r19
 cfa:	84 9f       	mul	r24, r20
 cfc:	60 0d       	add	r22, r0
 cfe:	21 1d       	adc	r18, r1
 d00:	82 2f       	mov	r24, r18
 d02:	76 2f       	mov	r23, r22
 d04:	6a 2f       	mov	r22, r26
 d06:	11 24       	eor	r1, r1
 d08:	9f 57       	subi	r25, 0x7F	; 127
 d0a:	50 40       	sbci	r21, 0x00	; 0
 d0c:	9a f0       	brmi	.+38     	; 0xd34 <__mulsf3_pse+0x88>
 d0e:	f1 f0       	breq	.+60     	; 0xd4c <__mulsf3_pse+0xa0>
 d10:	88 23       	and	r24, r24
 d12:	4a f0       	brmi	.+18     	; 0xd26 <__mulsf3_pse+0x7a>
 d14:	ee 0f       	add	r30, r30
 d16:	ff 1f       	adc	r31, r31
 d18:	bb 1f       	adc	r27, r27
 d1a:	66 1f       	adc	r22, r22
 d1c:	77 1f       	adc	r23, r23
 d1e:	88 1f       	adc	r24, r24
 d20:	91 50       	subi	r25, 0x01	; 1
 d22:	50 40       	sbci	r21, 0x00	; 0
 d24:	a9 f7       	brne	.-22     	; 0xd10 <__mulsf3_pse+0x64>
 d26:	9e 3f       	cpi	r25, 0xFE	; 254
 d28:	51 05       	cpc	r21, r1
 d2a:	80 f0       	brcs	.+32     	; 0xd4c <__mulsf3_pse+0xa0>
 d2c:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__fp_inf>
 d30:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__fp_szero>
 d34:	5f 3f       	cpi	r21, 0xFF	; 255
 d36:	e4 f3       	brlt	.-8      	; 0xd30 <__mulsf3_pse+0x84>
 d38:	98 3e       	cpi	r25, 0xE8	; 232
 d3a:	d4 f3       	brlt	.-12     	; 0xd30 <__mulsf3_pse+0x84>
 d3c:	86 95       	lsr	r24
 d3e:	77 95       	ror	r23
 d40:	67 95       	ror	r22
 d42:	b7 95       	ror	r27
 d44:	f7 95       	ror	r31
 d46:	e7 95       	ror	r30
 d48:	9f 5f       	subi	r25, 0xFF	; 255
 d4a:	c1 f7       	brne	.-16     	; 0xd3c <__mulsf3_pse+0x90>
 d4c:	fe 2b       	or	r31, r30
 d4e:	88 0f       	add	r24, r24
 d50:	91 1d       	adc	r25, r1
 d52:	96 95       	lsr	r25
 d54:	87 95       	ror	r24
 d56:	97 f9       	bld	r25, 7
 d58:	08 95       	ret

00000d5a <__udivmodqi4>:
 d5a:	99 1b       	sub	r25, r25
 d5c:	79 e0       	ldi	r23, 0x09	; 9
 d5e:	04 c0       	rjmp	.+8      	; 0xd68 <__udivmodqi4_ep>

00000d60 <__udivmodqi4_loop>:
 d60:	99 1f       	adc	r25, r25
 d62:	96 17       	cp	r25, r22
 d64:	08 f0       	brcs	.+2      	; 0xd68 <__udivmodqi4_ep>
 d66:	96 1b       	sub	r25, r22

00000d68 <__udivmodqi4_ep>:
 d68:	88 1f       	adc	r24, r24
 d6a:	7a 95       	dec	r23
 d6c:	c9 f7       	brne	.-14     	; 0xd60 <__udivmodqi4_loop>
 d6e:	80 95       	com	r24
 d70:	08 95       	ret

00000d72 <__divmodsi4>:
 d72:	05 2e       	mov	r0, r21
 d74:	97 fb       	bst	r25, 7
 d76:	1e f4       	brtc	.+6      	; 0xd7e <__divmodsi4+0xc>
 d78:	00 94       	com	r0
 d7a:	0e 94 d0 06 	call	0xda0	; 0xda0 <__negsi2>
 d7e:	57 fd       	sbrc	r21, 7
 d80:	07 d0       	rcall	.+14     	; 0xd90 <__divmodsi4_neg2>
 d82:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__udivmodsi4>
 d86:	07 fc       	sbrc	r0, 7
 d88:	03 d0       	rcall	.+6      	; 0xd90 <__divmodsi4_neg2>
 d8a:	4e f4       	brtc	.+18     	; 0xd9e <__divmodsi4_exit>
 d8c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__negsi2>

00000d90 <__divmodsi4_neg2>:
 d90:	50 95       	com	r21
 d92:	40 95       	com	r20
 d94:	30 95       	com	r19
 d96:	21 95       	neg	r18
 d98:	3f 4f       	sbci	r19, 0xFF	; 255
 d9a:	4f 4f       	sbci	r20, 0xFF	; 255
 d9c:	5f 4f       	sbci	r21, 0xFF	; 255

00000d9e <__divmodsi4_exit>:
 d9e:	08 95       	ret

00000da0 <__negsi2>:
 da0:	90 95       	com	r25
 da2:	80 95       	com	r24
 da4:	70 95       	com	r23
 da6:	61 95       	neg	r22
 da8:	7f 4f       	sbci	r23, 0xFF	; 255
 daa:	8f 4f       	sbci	r24, 0xFF	; 255
 dac:	9f 4f       	sbci	r25, 0xFF	; 255
 dae:	08 95       	ret

00000db0 <__udivmodsi4>:
 db0:	a1 e2       	ldi	r26, 0x21	; 33
 db2:	1a 2e       	mov	r1, r26
 db4:	aa 1b       	sub	r26, r26
 db6:	bb 1b       	sub	r27, r27
 db8:	fd 01       	movw	r30, r26
 dba:	0d c0       	rjmp	.+26     	; 0xdd6 <__udivmodsi4_ep>

00000dbc <__udivmodsi4_loop>:
 dbc:	aa 1f       	adc	r26, r26
 dbe:	bb 1f       	adc	r27, r27
 dc0:	ee 1f       	adc	r30, r30
 dc2:	ff 1f       	adc	r31, r31
 dc4:	a2 17       	cp	r26, r18
 dc6:	b3 07       	cpc	r27, r19
 dc8:	e4 07       	cpc	r30, r20
 dca:	f5 07       	cpc	r31, r21
 dcc:	20 f0       	brcs	.+8      	; 0xdd6 <__udivmodsi4_ep>
 dce:	a2 1b       	sub	r26, r18
 dd0:	b3 0b       	sbc	r27, r19
 dd2:	e4 0b       	sbc	r30, r20
 dd4:	f5 0b       	sbc	r31, r21

00000dd6 <__udivmodsi4_ep>:
 dd6:	66 1f       	adc	r22, r22
 dd8:	77 1f       	adc	r23, r23
 dda:	88 1f       	adc	r24, r24
 ddc:	99 1f       	adc	r25, r25
 dde:	1a 94       	dec	r1
 de0:	69 f7       	brne	.-38     	; 0xdbc <__udivmodsi4_loop>
 de2:	60 95       	com	r22
 de4:	70 95       	com	r23
 de6:	80 95       	com	r24
 de8:	90 95       	com	r25
 dea:	9b 01       	movw	r18, r22
 dec:	ac 01       	movw	r20, r24
 dee:	bd 01       	movw	r22, r26
 df0:	cf 01       	movw	r24, r30
 df2:	08 95       	ret

00000df4 <_exit>:
 df4:	f8 94       	cli

00000df6 <__stop_program>:
 df6:	ff cf       	rjmp	.-2      	; 0xdf6 <__stop_program>
